name: "Astro Deploy"
description: "A composite action that prepares your Astro site to be deployed to GitHub Pages"
branding:
  icon: "arrow-up-right"
  color: "purple"
inputs:
  node-version:
    description: "The node version to use"
    required: false
    default: "22"
  package-manager:
    description: "You may specify your preferred package manager (one of `npm | yarn | pnpm | bun | deno` and an optional `@<version>` tag). Otherwise, the package manager will be automatically detected."
    required: false
    default: ""
  path:
    description: "Path of the directory containing your site"
    required: false
    default: "."
  build-cmd:
    description: "The command used to build your site"
    required: false
    default:

runs:
  using: composite
  steps:
    - name: Check lockfiles
      shell: "bash"
      working-directory: ${{ inputs.path }}
      env:
        INPUT_PM: ${{ inputs.package-manager }}
      run: |
        len=`echo $INPUT_PM | wc -c`
        if [ $len -gt 1 ]; then
          PACKAGE_MANAGER=$(echo "$INPUT_PM" | grep -o '^[^@]*')
          VERSION=$(echo "$INPUT_PM" | { grep -o '@.*' || true; } | sed 's/^@//')
          # Set default VERSION if not provided
          if [ -z "$VERSION" ]; then
              if [ "$PACKAGE_MANAGER" = "deno" ]; then
                  # The denoland/setup-deno action equivalent of "latest"
                  VERSION="vx.x.x"
              else
                  VERSION="latest"
              fi
          fi
          echo "PACKAGE_MANAGER=$PACKAGE_MANAGER" >> $GITHUB_ENV
        elif [ $(find "." -maxdepth 1 -name "pnpm-lock.yaml") ]; then
            echo "PACKAGE_MANAGER=pnpm" >> $GITHUB_ENV
            echo "LOCKFILE=pnpm-lock.yaml" >> $GITHUB_ENV
            # If packageManager field is not present, use latest version.
            if ! jq -e '.packageManager' package.json > /dev/null 2>&1; then
                VERSION="latest"
                # Annotate this action run to let users know weâ€™re using the default.
                echo "::warning title=Could not detect PNPM version::No \`packageManager\` field found in \`package.json\`. Using latest PNPM version instead. We recommend specifying \`pnpm@VERSION\` explicitly using the \`packageManager\` field in your \`package.json\`."
            fi
        elif [ $(find "." -maxdepth 1 -name "yarn.lock") ]; then
            echo "PACKAGE_MANAGER=yarn" >> $GITHUB_ENV
            echo "LOCKFILE=yarn.lock" >> $GITHUB_ENV
        elif [ $(find "." -maxdepth 1 -name "package-lock.json") ]; then
            VERSION="latest"
            echo "PACKAGE_MANAGER=npm" >> $GITHUB_ENV
            echo "LOCKFILE=package-lock.json" >> $GITHUB_ENV
        elif [ $(find "." -maxdepth 1 -name "bun.lock") ]; then
            VERSION="latest"
            echo "PACKAGE_MANAGER=bun" >> $GITHUB_ENV
            echo "LOCKFILE=bun.lock" >> $GITHUB_ENV
        elif [ $(find "." -maxdepth 1 -name "bun.lockb") ]; then
            VERSION="latest"
            echo "PACKAGE_MANAGER=bun" >> $GITHUB_ENV
            echo "LOCKFILE=bun.lockb" >> $GITHUB_ENV
        elif [ -f "deno.json" ] || [ -f "deno.jsonc" ] || [ -f "deno.lock" ]; then
            VERSION="vx.x.x"
            echo "PACKAGE_MANAGER=deno" >> $GITHUB_ENV
            echo "LOCKFILE=deno.lock" >> $GITHUB_ENV
        else
            echo "No lockfile found.
        Please specify your preferred \"package-manager\" in the action configuration."
            exit 1
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    - name: Setup PNPM
      if: ${{ env.PACKAGE_MANAGER == 'pnpm' }}
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.VERSION }}
        package_json_file: "${{ inputs.path }}/package.json"
    
    - name: Setup Bun
      if: ${{ env.PACKAGE_MANAGER == 'bun' }}
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: ${{ env.VERSION }}

    - name: Setup Deno
      if: ${{ env.PACKAGE_MANAGER == 'deno' }}
      uses: denoland/setup-deno@v2
      with:
        deno-version: ${{ env.VERSION }}

    - name: Setup Node
      uses: actions/setup-node@v4
      if: ${{ env.PACKAGE_MANAGER != 'bun' && env.PACKAGE_MANAGER != 'deno' }}
      with:
        node-version: ${{ inputs.node-version }}
        cache: ${{ env.PACKAGE_MANAGER }}
        cache-dependency-path: "${{ inputs.path }}/${{ env.LOCKFILE }}"
    
    - name: Setup Node (Bun)
      uses: actions/setup-node@v4
      if: ${{ env.PACKAGE_MANAGER == 'bun' }}
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        if [ "$PACKAGE_MANAGER" = "deno" ]; then
          # For Deno projects with deno.json, cache dependencies
          if [ -f "deno.json" ] || [ -f "deno.jsonc" ]; then
            echo "Caching Deno dependencies..."
            deno cache --lock=deno.lock --lock-write **/*.ts **/*.tsx 2>/dev/null || true
          fi
          # For hybrid projects with package.json, install npm dependencies
          if [ -f "package.json" ]; then
            echo "Installing npm dependencies with Deno..."
            deno install --allow-scripts
          fi
        else
          # Standard package manager install
          $PACKAGE_MANAGER install
        fi

    - name: Build (npm/yarn/pnpm/bun)
      if: ${{ env.PACKAGE_MANAGER != 'deno' }}
      shell: bash
      working-directory: ${{ inputs.path }}
      run: ${{ inputs.build-cmd || '$PACKAGE_MANAGER run build' }}

    - name: Build (Deno)
      if: ${{ env.PACKAGE_MANAGER == 'deno' }}
      shell: bash
      working-directory: ${{ inputs.path }}
      run: ${{ inputs.build-cmd || 'deno task build' }}

    - name: Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: "${{ inputs.path }}/dist/"
